<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ories的博客</title>
    <link>http://example.org/</link>
    <description>Recent content on Ories的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 12 Dec 2022 10:49:20 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用webstorm连接remix开发区块链</title>
      <link>http://example.org/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webstorm%E8%BF%9E%E6%8E%A5remix%E5%BC%80%E5%8F%91%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Mon, 12 Dec 2022 10:49:20 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webstorm%E8%BF%9E%E6%8E%A5remix%E5%BC%80%E5%8F%91%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description>运行命令，全局安装，注意切换源
npm install -g @remix-project/remixd 点击run-&amp;gt; configuration
配置一下working directory，选到自己的工作目录 配置一下JavaScript file，选择到刚才安装的安装包 通过npm root -g可以查找到安装包的路径，由于我用了nrm进行node版本管理，我的包存放的位置在
/Users/ories/.nvm/versions/node/v16.15.0/lib/node_modules 最终输入的值
/Users/ories/.nvm/versions/node/v16.15.0/lib/node_modules/@remix-project/remixd/src/bin/remixd.js 浏览器地址输入
https://remix.ethereum.org/ webstorm安装下sol的插件。
然后有两种方式启动,第一种，view -&amp;gt; tool windows -&amp;gt; services 第二种方式，命令行运行
npx remixd -s . --remix-ide https://remix.ethereum.org 之后打开https://remix.ethereum.org，点击连接到localhost即可</description>
    </item>
    
    <item>
      <title>Learn Solidity 4 Unit</title>
      <link>http://example.org/posts/learn-solidity-4-unit/</link>
      <pubDate>Sun, 11 Dec 2022 16:41:39 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-4-unit/</guid>
      <description>solidity中的单位  uint表示uint256，表示0-2^256-1 // 科学计算器地址: https://www.desmos.com/scientific?lang=zh-CN uint32 表示0-2^32-1 uint16  转换例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; // 从高到低 uint32 a = 0x12345678; uint16 b = uint16(a); // b = 0x5678 // 从低到高 uint16 c = 0x1234; uint32 d = uint32(c); // d = 0x00001234 // 同理 bytes2 和 bytes1 // 从高到低失去精度 bytes2 e = 0x1234; bytes1 f = bytes1(e) // f = 0x12 // 从低到高补0 bytes2 g = 0x1234; bytes4 h = bytes4(g); // h = 0x12340000  以太坊单位换算  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Learn Solidity 3 Mapping</title>
      <link>http://example.org/posts/learn-solidity-3-mapping/</link>
      <pubDate>Sun, 11 Dec 2022 15:38:45 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-3-mapping/</guid>
      <description>这里的map可以理解成js，或者python的map。
 代码例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; // 如果map没有值返回0 contract learnMapping { mapping(address =&amp;gt; uint) public myMap; function getAddress(address _addr) public view returns(uint) { return myMap[_addr]; } function setAddress(address _addr, uint _i) public { myMap[_addr] = _i; } function removeAddress(address _addr) public { delete myMap[_addr]; } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnMapping { struct Movie { string title; string director; } mapping(uint =&amp;gt; Movie) movie; function addMovie(uint id, string memory title, string memory director) public { movie[id] = Movie(title, director); } }  嵌套映射例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Learn Solidity 2 Structs</title>
      <link>http://example.org/posts/learn-solidity-2-structs/</link>
      <pubDate>Sun, 11 Dec 2022 13:36:41 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-2-structs/</guid>
      <description>用于定义自己的数据结构，有点像ts中的类型  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnStructs { struct Movie { string title; string director; uint movie_id; } Movie movie; function setMovie() public { movie = Movie(&amp;#39;Blade Runnder&amp;#39;, &amp;#39; Ridley Scott&amp;#39;, 1); } function getMovieId() public view returns(uint) { return movie.movie_id; } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnStructs { struct Movie { string title; string director; uint movie_id; } Movie movie; Movie comedy; function setMovie() public { // movie = Movie(&amp;#39;Blade Runnder&amp;#39;, &amp;#39; Ridley Scott&amp;#39;, 1);  // movie = Movie(&amp;#39;Escaoe From New York&amp;#39;, &amp;#39;John Carpenter&amp;#39;, 3);  comedy = Movie(&amp;#39;Zoolander&amp;#39;, &amp;#39;Ben Stiller&amp;#39;, 4); } function getMovieId() public view returns(uint) { // return movie.</description>
    </item>
    
    <item>
      <title>Learn Solidity 1 Enum</title>
      <link>http://example.org/posts/learn-solidity-1-enum/</link>
      <pubDate>Sun, 11 Dec 2022 13:12:28 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-1-enum/</guid>
      <description>简单可以理解成ts中的枚举值  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract enumsLearn { enum frenchFriesSize {LARGE, MEDIUM, SMALL} // 默认是第一个  frenchFriesSize choice; frenchFriesSize constant defaultChoice = frenchFriesSize.MEDIUM; function setSmall() public { choice = frenchFriesSize.SMALL; } function getChoice() public view returns(frenchFriesSize) { return choice; } function getDefaultChoice() public pure returns (uint) { return uint(defaultChoice); } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract enumsLearn { enum shirtColor {RED, WHITE, BLUE} shirtColor choice; shirtColor constant defaultChoice = shirtColor.</description>
    </item>
    
    <item>
      <title>Learn Solidity 0 Array</title>
      <link>http://example.org/posts/learn-solidity-0-array/</link>
      <pubDate>Sat, 10 Dec 2022 19:00:36 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-0-array/</guid>
      <description>相关代码，总体和js数组很相似  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnArrays { uint[] public myArray; uint[] public myArray2; uint[200] public myFixedSizedArray; function push(uint number) public { myArray.push(number); } function pop() public { myArray.pop(); } function getLength() public view returns (uint) { return myArray.length; } function remove(uint i) public { // 当你删掉的时候array的长度没变 [1,2,3]，remove[2]-&amp;gt; [1,2,0]  delete myArray[i]; } // 练习  uint[] public changeArray; function removeElement(uint i) public { changeArray[i] = changeArray[changeArray.</description>
    </item>
    
    <item>
      <title>工程化面试相关</title>
      <link>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:51:08 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>别人写的blog 1. 常见 loader 和 plugin 有哪些？二者区别是什么？   常见 loader 在 webpack 文档里写了：传送门
  必须记住的一些loader
    babel-loader 把 JS/TS 变成 JS
  ts-loader 把 TS 变成 JS，并提示类型错误 md相关
  markdown-loader 把 markdown 变成 html
  html-loader 把 html 变成 JS 字符串 css 相关
  sass-loader 把 SASS/SCSS 变成 CSS
  css-loader 把 CSS 变成 JS 字符串
  style-loader 把 JS 字符串变成 style 标签</description>
    </item>
    
    <item>
      <title>React面试相关</title>
      <link>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:11:03 +0800</pubDate>
      
      <guid>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>1. 什么是虚拟dom  什么是虚拟dom，或者问虚拟DOM的原理是什么相关的问题。  参考官方文档: https://zh-hans.reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom 自己回答 参考博客: https://juejin.cn/post/7136563454525063205    1.是什么 虚拟DOM就是虚拟节点(这句汉化很重要)。React用JS对象来模拟真实的DOM节点，然后将其渲 染成真实的DOM节点。也就是说，它不是真实的DOM节点，但是代表真实的DOM节点。 2.怎么做 第一步是模拟 用JSX语法写出来的div其实就是一个虚拟节点:
&amp;lt;div id=&amp;quot;x&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;red&amp;quot;&amp;gt;hi&amp;lt;/span&amp;gt;	&amp;lt;/div&amp;gt;	会得到这样一个对象，它有三个重要属性，第一个是tag表示是哪个标签，第二个是props表示有哪些属性，第三个是children表示它有哪些子标签或者说子文本
{ tag: &amp;#39;div&amp;#39;, props: { id: &amp;#39;x&amp;#39; }, children: [ { tag: &amp;#39;span&amp;#39;, props: { className: &amp;#39;red&amp;#39; }, children: [ &amp;#39;hi&amp;#39; ], } ] } 为什么写这么个标签能变成这样一个对象，这是因为JSX的语法。能做到这一点是因为JSX语法会被转译为createElement函数调用(也叫h函数)，如下:
React.createElement(&amp;#34;div&amp;#34;,{ id:&amp;#34;x&amp;#34;}, React.createElement(&amp;#34;span&amp;#34;,{ class: &amp;#34;red&amp;#34; },&amp;#34;hi&amp;#34;) ) 第二步是将虚拟节点渲染为真实节点， 参考:https://juejin.cn/post/6844903870229905422
function render(vdom) { // 如果是字符串或者数字，创建一个文本节点  if (typeof vdom === &amp;#39;string&amp;#39; || typeof vdom === &amp;#39;number&amp;#39;) { return document.</description>
    </item>
    
    <item>
      <title>Screeps记录一</title>
      <link>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Mon, 10 Oct 2022 10:06:40 +0800</pubDate>
      
      <guid>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>教学中的命令 Game.spawns[&#39;Spawn1&#39;].spawnCreep( [WORK, CARRY, MOVE], &#39;Harvester1&#39; ); </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 Oct 2021 21:18:05 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 尝试下一下hugo的博客。</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ories的博客</title>
    <link>http://example.org/</link>
    <description>Recent content on Ories的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 07 Feb 2023 20:51:57 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习unicloud一</title>
      <link>http://example.org/posts/%E5%AD%A6%E4%B9%A0unicloud%E4%B8%80/</link>
      <pubDate>Tue, 07 Feb 2023 20:51:57 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%AD%A6%E4%B9%A0unicloud%E4%B8%80/</guid>
      <description>准备工作  新建一个云空间并关联，最终效果   正式开始  cloudfunctions右键创建云对象，代码就写在里面 index.obj.js中写上  module.exports = { _before: function () { // 通用预处理器 	}, say() { return { errCode: 0, data: &amp;#34;hello, i&amp;#39;m uniCloud&amp;#34; } } } index.vue中使用，点击即可使用
&amp;lt;template&amp;gt; &amp;lt;view class=&amp;quot;content&amp;quot;&amp;gt; &amp;lt;button @click=&amp;quot;callco&amp;quot;&amp;gt;呼叫服务器&amp;lt;/button&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { title: &#39;Hello&#39; } }, onLoad() { }, methods: { async callco() { const co1 = uniCloud.importObject(&amp;quot;co1&amp;quot;) let res = await co1.</description>
    </item>
    
    <item>
      <title>Lear Solidity 10 Cryptographic Functions</title>
      <link>http://example.org/posts/lear-solidity-10-cryptographic-functions/</link>
      <pubDate>Thu, 15 Dec 2022 21:21:47 +0800</pubDate>
      
      <guid>http://example.org/posts/lear-solidity-10-cryptographic-functions/</guid>
      <description>使用算法实现随机数的生成 // SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.7.0 &amp;lt;0.9.0; contract GenerateRandomNumber { // modulo (%)  // 要做的事情是接受一个输入范围，使用加密图形散列算法，得到随机数字  function randMod(uint256 range) external view returns (uint256) { // abi.encodePacked 可以连接参数  return uint256( keccak256( abi.encodePacked( block.timestamp, block.difficulty, msg.sender ) ) ) % range; } }  练习，使用oracle dynamic feeds实现随机  Oracle函数 这段代码定义了一个名为 Oracle 的智能合约。智能合约是一种区块链上的自动执行的程序，它遵循由 Solidity 编写的智能合约语言。 在这个智能合约中，定义了一个变量 admin，用来存储发布智能合约的地址。还定义了一个 uint256 类型的公共变量 rand，用来存储一个随机数。 智能合约还定义了一个名为 constructor 的构造函数，它在智能合约被部署时会自动执行。在这个构造函数中，会将 admin 变量的值设置为部署智能合约的地址。 智能合约还定义了一个名为 feedRand 的函数，它允许指定的用户更新随机数的值。这个函数只能由 admin 调用，因为在函数中会检查调用者的地址是否与 admin 的地址相同。如果调用者是 admin，那么函数会将 rand 变量的值设置为传入函数中的参数 _rand。 GenerateRandomNumber函数 这段代码定义了一个名为 GenerateRandomNumber 的智能合约。这个智能合约接受一个输入范围，并使用加密图形散列算法（cryptographic hash function）生成随机数。智能合约定义了一个名为 oracle 的变量，用来引用一个 Oracle 合约的实例。智能合约还定义了一个构造函数，该函数接受一个地址，并使用该地址初始化 oracle 变量。智能合约还定义了一个名为 randMod 的函数，该函数接受一个 uint256 类型的参数 range，并返回一个 uint256 类型的随机数。在函数中，会使用 oracle.</description>
    </item>
    
    <item>
      <title>Learn Solidty 9 Function Overload</title>
      <link>http://example.org/posts/learn-solidty-9-function-overload/</link>
      <pubDate>Thu, 15 Dec 2022 20:45:26 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidty-9-function-overload/</guid>
      <description>简单理解就是 java 里面的函数的重载，相同函数名，不同的参数或者参数类型就是重载  举例  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.7.0 &amp;lt;0.9.0; contract FunctionOverloading { function x(uint256 lightSwitch, uint256 wallet) public {} function x(uint256 wallet) public {} // 重载练习  function getSum(uint256 a, uint256 b) public pure returns (uint256) { return a + b; } function getSum( uint256 a, uint256 b, uint256 c ) public pure returns (uint256) { return a + b + c; } function getSumTwoArgs() public pure returns (uint256) { return getSum(2, 3); } function getSumThreeArgs() public pure returns (uint256) { return getSum(1, 5, 6); } } </description>
    </item>
    
    <item>
      <title>Learn Solidity 8 FallBack Functions</title>
      <link>http://example.org/posts/learn-solidity-8-fallback-functions/</link>
      <pubDate>Thu, 15 Dec 2022 20:45:00 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-8-fallback-functions/</guid>
      <description>view 就是限定不能修改状态，用于直接返回状态。pure 就是用于返回计算结果，不能修改状态。
 基本例子  在 Solidity 中，call 和 transfer 关键字用于调用其它合约的函数并发送以太币。
call 关键字用于调用其它合约上的函数。它通常用于与其它合约交互，而无需创建新的事务。如果不希望为函数调用支付 gas 或者希望调用不属于你的合约上的函数，这将会非常有用。
另一方面，transfer 关键字用于向其它合约或地址发送以太币。与 call 不同，transfer 总是会创建新事务并消耗 gas。它通常用于向其它合约或地址发送以太币作为合约的逻辑的一部分。
// SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.7.0 &amp;lt;0.9.0; /* * FallBack Function * 1. 没有名字，是一个匿名函数 * 2. 没有任何输入 * 3. 没有任何输出 * 4. 必须背定义成external * 为什么要用？ 当我们调用一些不存在的函数，或者是通过 send, transfer 或 call 发送以太给一个合约 */ contract FallBack { event Log(uint256 gas); fallback() external payable { // 不推荐些太多的代码在这里,这个函数将会失败如果它用了太多的gas，通常我们不写任何代码  // 触发send的方法， 我们将得到2300gas 以足够发出一个日志  // 触发call的方法， 我们将得到所有的gas  // 这里是一个特殊的函数，返回还剩下多少gas  emit Log(gasleft()); } function getBalance() public view returns (uint256) { // 返回合约存储的余额;  return address(this).</description>
    </item>
    
    <item>
      <title>Learn Solidity 7 View and Pure Modifers</title>
      <link>http://example.org/posts/learn-solidity-7-view-and-pure-modifers/</link>
      <pubDate>Wed, 14 Dec 2022 14:57:24 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-7-view-and-pure-modifers/</guid>
      <description>view 就是限定不能修改状态，用于直接返回状态。pure 就是用于返回计算结果，不能修改状态。
 基本例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.7.0 &amp;lt;0.9.0; contract MyContract { uint256 value; // 加了view才能显示，view的本质确保我们不能够修改值，只读  function getValue() external view returns (uint256) { // eth call  // 因为view,这里不能够修改,只能返回皇台  // value = value + 2;  return value; } function getNewValue() external pure returns (uint256) { // eth call  // pure表示不会修改状态，只返回计算值  return 3 + 3; } function setValue(uint256 _value) external { // eth send transaction  value = _value; } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.</description>
    </item>
    
    <item>
      <title>Learn Solidity 6 Function Modifers</title>
      <link>http://example.org/posts/learn-solidity-6-function-modifers/</link>
      <pubDate>Wed, 14 Dec 2022 14:57:07 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-6-function-modifers/</guid>
      <description>函数修饰符  Function Modifier 即函数修饰符，用于修改函数的行为。感觉有点像 python 的装饰器，具体看代码。  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;=0.7.0 &amp;lt;0.9.0; // Function Modifiers are customizable modification for functions contract Owner { address owner; // 当部署合约的时候，我们想把地址设置给owner(msg.sender)  constructor() public { owner = msg.sender; } modifier onlyOwner() { // 个性化的逻辑，修改function  require(msg.sender == owner); // _代表这个function还在继续  _; } // 练习: 写一个叫costs的修饰符，用于检查sender的金额比price大，并且需要接受一个参数  modifier costs(uint256 price) { // what msg.value: 表示发送给合约的信息中带有的金额  require(msg.value &amp;gt;= price); _; } } contract Register is Owner { mapping(address =&amp;gt; bool) registeredAddresses; uint256 price; constructor(uint256 initialPrice) public { price = initialPrice; } function register() public payable costs(price) { registeredAddresses[msg.</description>
    </item>
    
    <item>
      <title>Learn Solidity 5 Global Variables in Solidity</title>
      <link>http://example.org/posts/learn-solidity-5-global-variables-in-solidity/</link>
      <pubDate>Mon, 12 Dec 2022 11:40:19 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-5-global-variables-in-solidity/</guid>
      <description>全局变量有很多，这里只讨论一些常用的，全部可以参考官方文档
  中文文档
  两个合约交互的例子，使用公共的变量msg.sender
  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract LedgerBalance { mapping(address =&amp;gt; uint) balance; function updatesBalance(uint newBalance) public { balance[msg.sender] = newBalance; } } contract Updated { function updatesBalance() public { LedgerBalance ledgerBalance = new LedgerBalance(); ledgerBalance.updatesBalance(30); } }  一些其它的全局变量  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract SimpleStorage { uint storedData; function set(uint x) public { // storedData = x; // 区块难度 // storedData = block.</description>
    </item>
    
    <item>
      <title>如何使用webstorm连接remix开发区块链</title>
      <link>http://example.org/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webstorm%E8%BF%9E%E6%8E%A5remix%E5%BC%80%E5%8F%91%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
      <pubDate>Mon, 12 Dec 2022 10:49:20 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webstorm%E8%BF%9E%E6%8E%A5remix%E5%BC%80%E5%8F%91%E5%8C%BA%E5%9D%97%E9%93%BE/</guid>
      <description>运行命令，全局安装，注意切换源
npm install -g @remix-project/remixd 点击run-&amp;gt; configuration 配置一下working directory，选到自己的工作目录 配置一下JavaScript file，选择到刚才安装的安装包 通过npm root -g可以查找到安装包的路径，由于我用了nrm进行node版本管理，我的包存放的位置在
/Users/ories/.nvm/versions/node/v16.15.0/lib/node_modules 最终输入的值
/Users/ories/.nvm/versions/node/v16.15.0/lib/node_modules/@remix-project/remixd/src/bin/remixd.js 浏览器地址输入
https://remix.ethereum.org/ webstorm安装下sol的插件。
然后有两种方式启动,第一种，view -&amp;gt; tool windows -&amp;gt; services 第二种方式，命令行运行
npx remixd -s . --remix-ide https://remix.ethereum.org 之后打开https://remix.ethereum.org，点击连接到localhost即可</description>
    </item>
    
    <item>
      <title>Learn Solidity 4 Unit</title>
      <link>http://example.org/posts/learn-solidity-4-unit/</link>
      <pubDate>Sun, 11 Dec 2022 16:41:39 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-4-unit/</guid>
      <description>solidity中的单位  uint表示uint256，表示0-2^256-1 // 科学计算器地址: https://www.desmos.com/scientific?lang=zh-CN uint32 表示0-2^32-1 uint16  转换例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; // 从高到低 uint32 a = 0x12345678; uint16 b = uint16(a); // b = 0x5678 // 从低到高 uint16 c = 0x1234; uint32 d = uint32(c); // d = 0x00001234 // 同理 bytes2 和 bytes1 // 从高到低失去精度 bytes2 e = 0x1234; bytes1 f = bytes1(e) // f = 0x12 // 从低到高补0 bytes2 g = 0x1234; bytes4 h = bytes4(g); // h = 0x12340000  以太坊单位换算  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Learn Solidity 3 Mapping</title>
      <link>http://example.org/posts/learn-solidity-3-mapping/</link>
      <pubDate>Sun, 11 Dec 2022 15:38:45 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-3-mapping/</guid>
      <description>这里的map可以理解成js，或者python的map。
 代码例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; // 如果map没有值返回0 contract learnMapping { mapping(address =&amp;gt; uint) public myMap; function getAddress(address _addr) public view returns(uint) { return myMap[_addr]; } function setAddress(address _addr, uint _i) public { myMap[_addr] = _i; } function removeAddress(address _addr) public { delete myMap[_addr]; } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnMapping { struct Movie { string title; string director; } mapping(uint =&amp;gt; Movie) movie; function addMovie(uint id, string memory title, string memory director) public { movie[id] = Movie(title, director); } }  嵌套映射例子  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Learn Solidity 2 Structs</title>
      <link>http://example.org/posts/learn-solidity-2-structs/</link>
      <pubDate>Sun, 11 Dec 2022 13:36:41 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-2-structs/</guid>
      <description>用于定义自己的数据结构，有点像ts中的类型  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnStructs { struct Movie { string title; string director; uint movie_id; } Movie movie; function setMovie() public { movie = Movie(&amp;#39;Blade Runnder&amp;#39;, &amp;#39; Ridley Scott&amp;#39;, 1); } function getMovieId() public view returns(uint) { return movie.movie_id; } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnStructs { struct Movie { string title; string director; uint movie_id; } Movie movie; Movie comedy; function setMovie() public { // movie = Movie(&amp;#39;Blade Runnder&amp;#39;, &amp;#39; Ridley Scott&amp;#39;, 1);  // movie = Movie(&amp;#39;Escaoe From New York&amp;#39;, &amp;#39;John Carpenter&amp;#39;, 3);  comedy = Movie(&amp;#39;Zoolander&amp;#39;, &amp;#39;Ben Stiller&amp;#39;, 4); } function getMovieId() public view returns(uint) { // return movie.</description>
    </item>
    
    <item>
      <title>Learn Solidity 1 Enum</title>
      <link>http://example.org/posts/learn-solidity-1-enum/</link>
      <pubDate>Sun, 11 Dec 2022 13:12:28 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-1-enum/</guid>
      <description>简单可以理解成ts中的枚举值  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract enumsLearn { enum frenchFriesSize {LARGE, MEDIUM, SMALL} // 默认是第一个  frenchFriesSize choice; frenchFriesSize constant defaultChoice = frenchFriesSize.MEDIUM; function setSmall() public { choice = frenchFriesSize.SMALL; } function getChoice() public view returns(frenchFriesSize) { return choice; } function getDefaultChoice() public pure returns (uint) { return uint(defaultChoice); } }  练习  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract enumsLearn { enum shirtColor {RED, WHITE, BLUE} shirtColor choice; shirtColor constant defaultChoice = shirtColor.</description>
    </item>
    
    <item>
      <title>Learn Solidity 0 Array</title>
      <link>http://example.org/posts/learn-solidity-0-array/</link>
      <pubDate>Sat, 10 Dec 2022 19:00:36 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-0-array/</guid>
      <description>相关代码，总体和js数组很相似  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnArrays { uint[] public myArray; uint[] public myArray2; uint[200] public myFixedSizedArray; function push(uint number) public { myArray.push(number); } function pop() public { myArray.pop(); } function getLength() public view returns (uint) { return myArray.length; } function remove(uint i) public { // 当你删掉的时候array的长度没变 [1,2,3]，remove[2]-&amp;gt; [1,2,0]  delete myArray[i]; } // 练习  uint[] public changeArray; function removeElement(uint i) public { changeArray[i] = changeArray[changeArray.</description>
    </item>
    
    <item>
      <title>工程化面试相关</title>
      <link>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:51:08 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>别人写的blog 1. 常见 loader 和 plugin 有哪些？二者区别是什么？   常见 loader 在 webpack 文档里写了：传送门
  必须记住的一些loader
    babel-loader 把 JS/TS 变成 JS
  ts-loader 把 TS 变成 JS，并提示类型错误 md相关
  markdown-loader 把 markdown 变成 html
  html-loader 把 html 变成 JS 字符串 css 相关
  sass-loader 把 SASS/SCSS 变成 CSS
  css-loader 把 CSS 变成 JS 字符串
  style-loader 把 JS 字符串变成 style 标签</description>
    </item>
    
    <item>
      <title>React面试相关</title>
      <link>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:11:03 +0800</pubDate>
      
      <guid>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>1. 什么是虚拟dom  什么是虚拟dom，或者问虚拟DOM的原理是什么相关的问题。  参考官方文档: https://zh-hans.reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom 自己回答 参考博客: https://juejin.cn/post/7136563454525063205    1.是什么 虚拟DOM就是虚拟节点(这句汉化很重要)。React用JS对象来模拟真实的DOM节点，然后将其渲 染成真实的DOM节点。也就是说，它不是真实的DOM节点，但是代表真实的DOM节点。 2.怎么做 第一步是模拟 用JSX语法写出来的div其实就是一个虚拟节点:
&amp;lt;div id=&amp;quot;x&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;red&amp;quot;&amp;gt;hi&amp;lt;/span&amp;gt;	&amp;lt;/div&amp;gt;	会得到这样一个对象，它有三个重要属性，第一个是tag表示是哪个标签，第二个是props表示有哪些属性，第三个是children表示它有哪些子标签或者说子文本
{ tag: &amp;#39;div&amp;#39;, props: { id: &amp;#39;x&amp;#39; }, children: [ { tag: &amp;#39;span&amp;#39;, props: { className: &amp;#39;red&amp;#39; }, children: [ &amp;#39;hi&amp;#39; ], } ] } 为什么写这么个标签能变成这样一个对象，这是因为JSX的语法。能做到这一点是因为JSX语法会被转译为createElement函数调用(也叫h函数)，如下:
React.createElement(&amp;#34;div&amp;#34;,{ id:&amp;#34;x&amp;#34;}, React.createElement(&amp;#34;span&amp;#34;,{ class: &amp;#34;red&amp;#34; },&amp;#34;hi&amp;#34;) ) 第二步是将虚拟节点渲染为真实节点， 参考:https://juejin.cn/post/6844903870229905422
function render(vdom) { // 如果是字符串或者数字，创建一个文本节点  if (typeof vdom === &amp;#39;string&amp;#39; || typeof vdom === &amp;#39;number&amp;#39;) { return document.</description>
    </item>
    
    <item>
      <title>Screeps记录一</title>
      <link>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Mon, 10 Oct 2022 10:06:40 +0800</pubDate>
      
      <guid>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>教学中的命令 Game.spawns[&#39;Spawn1&#39;].spawnCreep( [WORK, CARRY, MOVE], &#39;Harvester1&#39; ); </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 Oct 2021 21:18:05 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 尝试下一下hugo的博客。</description>
    </item>
    
  </channel>
</rss>

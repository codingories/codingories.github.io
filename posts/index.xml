<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ories的博客</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Ories的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 10 Dec 2022 18:48:31 +0800</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Solidity Array</title>
      <link>http://example.org/posts/learn-solidity-array/</link>
      <pubDate>Sat, 10 Dec 2022 18:48:31 +0800</pubDate>
      
      <guid>http://example.org/posts/learn-solidity-array/</guid>
      <description> 相关代码，总体和js数组很相似  // SPDX-License-Identifier: MIT pragma solidity &amp;gt;= 0.7.0 &amp;lt; 0.9.0; contract learnArrays { uint[] public myArray; uint[] public myArray2; uint[200] public myFixedSizedArray; function push(uint number) public { myArray.push(number); } function pop() public { myArray.pop(); } function getLength() public view returns (uint) { return myArray.length; } function remove(uint i) public { // 当你删掉的时候array的长度没变 [1,2,3]，remove[2]-&amp;gt; [1,2,0]  delete myArray[i]; } } </description>
    </item>
    
    <item>
      <title>工程化面试相关</title>
      <link>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:51:08 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>别人写的blog 1. 常见 loader 和 plugin 有哪些？二者区别是什么？   常见 loader 在 webpack 文档里写了：传送门
  必须记住的一些loader
    babel-loader 把 JS/TS 变成 JS
  ts-loader 把 TS 变成 JS，并提示类型错误 md相关
  markdown-loader 把 markdown 变成 html
  html-loader 把 html 变成 JS 字符串 css 相关
  sass-loader 把 SASS/SCSS 变成 CSS
  css-loader 把 CSS 变成 JS 字符串
  style-loader 把 JS 字符串变成 style 标签</description>
    </item>
    
    <item>
      <title>React面试相关</title>
      <link>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 24 Oct 2022 15:11:03 +0800</pubDate>
      
      <guid>http://example.org/posts/react%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</guid>
      <description>1. 什么是虚拟dom  什么是虚拟dom，或者问虚拟DOM的原理是什么相关的问题。  参考官方文档: https://zh-hans.reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom 自己回答 参考博客: https://juejin.cn/post/7136563454525063205    1.是什么 虚拟DOM就是虚拟节点(这句汉化很重要)。React用JS对象来模拟真实的DOM节点，然后将其渲 染成真实的DOM节点。也就是说，它不是真实的DOM节点，但是代表真实的DOM节点。 2.怎么做 第一步是模拟 用JSX语法写出来的div其实就是一个虚拟节点:
&amp;lt;div id=&amp;quot;x&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;red&amp;quot;&amp;gt;hi&amp;lt;/span&amp;gt;	&amp;lt;/div&amp;gt;	会得到这样一个对象，它有三个重要属性，第一个是tag表示是哪个标签，第二个是props表示有哪些属性，第三个是children表示它有哪些子标签或者说子文本
{ tag: &amp;#39;div&amp;#39;, props: { id: &amp;#39;x&amp;#39; }, children: [ { tag: &amp;#39;span&amp;#39;, props: { className: &amp;#39;red&amp;#39; }, children: [ &amp;#39;hi&amp;#39; ], } ] } 为什么写这么个标签能变成这样一个对象，这是因为JSX的语法。能做到这一点是因为JSX语法会被转译为createElement函数调用(也叫h函数)，如下:
React.createElement(&amp;#34;div&amp;#34;,{ id:&amp;#34;x&amp;#34;}, React.createElement(&amp;#34;span&amp;#34;,{ class: &amp;#34;red&amp;#34; },&amp;#34;hi&amp;#34;) ) 第二步是将虚拟节点渲染为真实节点， 参考:https://juejin.cn/post/6844903870229905422
function render(vdom) { // 如果是字符串或者数字，创建一个文本节点  if (typeof vdom === &amp;#39;string&amp;#39; || typeof vdom === &amp;#39;number&amp;#39;) { return document.</description>
    </item>
    
    <item>
      <title>Screeps记录一</title>
      <link>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Mon, 10 Oct 2022 10:06:40 +0800</pubDate>
      
      <guid>http://example.org/posts/screeps%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>教学中的命令 Game.spawns[&#39;Spawn1&#39;].spawnCreep( [WORK, CARRY, MOVE], &#39;Harvester1&#39; ); </description>
    </item>
    
    <item>
      <title>如何用hugo搭建个人博客</title>
      <link>http://example.org/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 11 Oct 2021 21:19:38 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>今天分享一下mac电脑上如何搭建一个hugo个人博客。
安装hugo brew install hugo  验证hugo安装成功  hugo version 参考hugo的文档  hugo官网 改成自己的站点名字  hugo new site codingories.github.io-creator  安装主题  cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo theme = \&amp;quot;ananke\&amp;quot; &amp;gt;&amp;gt; config.toml  创建博客，这边需要注意要加md  hugo new posts/我的第一篇博客.md  运行网站服务器  hugo server -D  编辑自定义主题config.toml  baseURL = &amp;quot;https://example.org/&amp;quot; languageCode = &amp;quot;en-us&amp;quot; title = &amp;quot;My New Hugo Site&amp;quot; theme = &amp;quot;ananke&amp;quot;  生成静态页面  hugo -D 将public提交到github仓库  参考github静态页面教程，进行部署和配置域名等操作  </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 Oct 2021 21:18:05 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 尝试下一下hugo的博客。</description>
    </item>
    
  </channel>
</rss>
